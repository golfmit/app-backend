package com.serverless.dal;

import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapperConfig;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBRangeKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBQueryExpression;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBScanExpression;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.PaginatedQueryList;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;

import org.apache.log4j.Logger;

@DynamoDBTable(tableName = "PLACEHOLDER_EXERCISES_TABLE_NAME")
public class Exercise {

    // get the table name from env. var. set in serverless.yml
    private static final String EXERCISES_TABLE_NAME = System.getenv("EXERCISES_TABLE_NAME");

    private static DynamoDBAdapter db_adapter;
    private final AmazonDynamoDB client;
    private final DynamoDBMapper mapper;

    private Logger logger = Logger.getLogger(this.getClass());

    private String id;
    private String group;
    private String name;
    private String url;

    @DynamoDBHashKey(attributeName = "id")
    @DynamoDBAutoGeneratedKey
    public String getId() {
        return this.id;
    }
    public void setId(String id) {
        this.id = id;
    }

    @DynamoDBRangeKey(attributeName = "name")
    public String getName() {
        return this.name;
    }
    public void setName(String name) {
        this.name = name;
    }

    @DynamoDBRangeKey(attributeName = "group")
    public String getGroup() {
        return this.group;
    }
    public void setGroup(String group) {
        this.group = group;
    }

    @DynamoDBAttribute(attributeName = "url")
    public String getUrl() {
        return this.url;
    }
    public void setUrl(String url) {
        this.url = url;
    }

    public Exercise() {
        // build the mapper config
        DynamoDBMapperConfig mapperConfig = DynamoDBMapperConfig.builder()
            .withTableNameOverride(new DynamoDBMapperConfig.TableNameOverride(EXERCISES_TABLE_NAME))
            .build();
        // get the db adapter
        this.db_adapter = DynamoDBAdapter.getInstance();
        this.client = this.db_adapter.getDbClient();
        // create the mapper with config
        this.mapper = this.db_adapter.createDbMapper(mapperConfig);
    }

    public String toString() {
        return String.format("Exercise [id=%s, groupi=%s, name=%s, url=$s]", this.id, this.group, this.name, this.url);
    }

    // methods
    public Boolean ifTableExists() {
        return this.client.describeTable(EXERCISES_TABLE_NAME).getTable().getTableStatus().equals("ACTIVE");
    }

    public List<Exercise> list() throws IOException {
      DynamoDBScanExpression scanExp = new DynamoDBScanExpression();
      List<Exercise> results = this.mapper.scan(Exercise.class, scanExp);
      for (Exercise p : results) {
        logger.info("Exercises - list(): " + p.toString());
      }
      return results;
    }

    public Exercise get(String id) throws IOException {
        Exercise exercise = null;

        HashMap<String, AttributeValue> av = new HashMap<String, AttributeValue>();
        av.put(":v1", new AttributeValue().withS(id));

        DynamoDBQueryExpression<Exercise> queryExp = new DynamoDBQueryExpression<Exercise>()
            .withKeyConditionExpression("id = :v1")
            .withExpressionAttributeValues(av);

        PaginatedQueryList<Exercise> result = this.mapper.query(Exercise.class, queryExp);
        if (result.size() > 0) {
          exercise = result.get(0);
          logger.info("Exercises - get(): exercise - " + exercise.toString());
        } else {
          logger.info("Exercises - get(): exercise - Not Found.");
        }
        return exercise;
    }

    public void save(Exercise exercise) throws IOException {
        logger.info("Exercises - save(): " + exercise.toString());
        this.mapper.save(exercise);
    }

    public Boolean delete(String id) throws IOException {
        Exercise exercise = null;

        // get exercise if exists
        exercise = get(id);
        if (exercise != null) {
          logger.info("Exercises - delete(): " + exercise.toString());
          this.mapper.delete(exercise);
        } else {
          logger.info("Exercises - delete(): exercise - does not exist.");
          return false;
        }
        return true;
    }

}